service: 'import-service'
  
frameworkVersion: '2'
useDotenv: true
 
custom: 
  webpack: 
    webpackConfig: './webpack.config.js'
    includeModules: true
  dotenv:
    required:
      file: true

plugins: 
  - serverless-webpack
  - serverless-dotenv-plugin

package:
  individually: true

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: dev
  region: eu-central-1
  apiGateway: 
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    BUCKET: ${env:BUCKET}
    SQS_URL: ${env:SQS_URL}

  #    Fn::ImportValue:
  #      !Sub cf:${env.PRODUCT_SERVICE}-${self:provider.stage}.SQSQueueArn
  iam:
    role:
      statements:
        - Effect: Allow
          Action: s3:ListBucket
          Resource:
            - arn:aws:s3:::${env:BUCKET}

        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - arn:aws:s3:::${env:BUCKET}/*

        - Effect: Allow
          Action: sqs:*
          Resource:
            - ${env:SQS_ARN}

  #          Fn::ImportValue:
  #           !Sub cf:${env.PRODUCT_SERVICE}-${self:provider.stage}.SQSQueueLink

  s3:
    bucketOne:
      name: ${env:BUCKET}
      corsConfiguration:
          CorsRules:
            - AllowedMethods:
                - GET
                - PUT
                - DELETE
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'

functions:
  importProductsFile:
    handler: functions/importProductsFile/importProductsFile.handler
    events:
      - http:
          path: /import
          method: get
          cors: true
          authorizer:
            type: TOKEN
            authorizerId:
              Ref: BasicAuthorizer          
          request:
            parameters:
              querystrings:
                name: true

  importFileParser:
    handler: functions/importFileParser/importFileParser.handler
    events:
      - s3: bucketOne
        event: s3:ObjectCreated:*
        rules:
          - prefix: uploaded/
          - suffix: .csv

resources:
  Resources:
    BasicAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: BasicAuthorizer
        Type: TOKEN
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - Fn::ImportValue: BasicAuthorizerArn
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault400:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"data\": $context.error.messageString }"

    GatewayResponseAccessDeied:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: ACCESS_DENIED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"message\": $context.error.messageString }"

    GatewayResponseUnauthorized:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        ResponseType: UNAUTHORIZED
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"message\": $context.error.messageString }"

    GatewayResponseDefault500:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        RestApiId:
          Ref: "ApiGatewayRestApi"
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseTemplates:
          application/json: "{ \"data\": $context.error.messageString }"