import { __assign, __awaiter, __generator, __rest } from "tslib";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { SHA256_HEADER, UNSIGNED_PAYLOAD } from "./constants";
var S3RequestPresigner = /** @class */ (function () {
    function S3RequestPresigner(options) {
        var resolvedOptions = __assign({ 
            // Allow `signingName` because we want to support usecase of supply client's resolved config
            // directly. Where service equals signingName.
            service: options.signingName || options.service || "s3", uriEscapePath: options.uriEscapePath || false }, options);
        this.signer = new SignatureV4(resolvedOptions);
    }
    S3RequestPresigner.prototype.presign = function (requestToSign, _a) {
        if (_a === void 0) { _a = {}; }
        var _b = _a.unsignableHeaders, unsignableHeaders = _b === void 0 ? new Set() : _b, _c = _a.unhoistableHeaders, unhoistableHeaders = _c === void 0 ? new Set() : _c, options = __rest(_a, ["unsignableHeaders", "unhoistableHeaders"]);
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                unsignableHeaders.add("content-type");
                // S3 requires SSE headers to be signed in headers instead of query
                // See: https://github.com/aws/aws-sdk-js-v3/issues/1576
                Object.keys(requestToSign.headers)
                    .map(function (header) { return header.toLowerCase(); })
                    .filter(function (header) { return header.startsWith("x-amz-server-side-encryption"); })
                    .forEach(function (header) {
                    unhoistableHeaders.add(header);
                });
                requestToSign.headers[SHA256_HEADER] = UNSIGNED_PAYLOAD;
                if (!requestToSign.headers["host"]) {
                    requestToSign.headers.host = requestToSign.hostname;
                    if (requestToSign.port) {
                        requestToSign.headers.host = requestToSign.headers.host + ":" + requestToSign.port;
                    }
                }
                return [2 /*return*/, this.signer.presign(requestToSign, __assign({ expiresIn: 900, unsignableHeaders: unsignableHeaders, unhoistableHeaders: unhoistableHeaders }, options))];
            });
        });
    };
    return S3RequestPresigner;
}());
export { S3RequestPresigner };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2lnbmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3ByZXNpZ25lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBMEMsTUFBTSx1QkFBdUIsQ0FBQztBQUk1RixPQUFPLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBYzlEO0lBRUUsNEJBQVksT0FBa0M7UUFDNUMsSUFBTSxlQUFlO1lBQ25CLDRGQUE0RjtZQUM1Riw4Q0FBOEM7WUFDOUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQ3ZELGFBQWEsRUFBRSxPQUFPLENBQUMsYUFBYSxJQUFJLEtBQUssSUFDMUMsT0FBTyxDQUNYLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksV0FBVyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFWSxvQ0FBTyxHQUFwQixVQUNFLGFBQTJCLEVBQzNCLEVBQThHO1FBQTlHLG1CQUFBLEVBQUEsT0FBOEc7UUFBNUcsSUFBQSx5QkFBNkIsRUFBN0IsaUJBQWlCLG1CQUFHLElBQUksR0FBRyxFQUFFLEtBQUEsRUFBRSwwQkFBOEIsRUFBOUIsa0JBQWtCLG1CQUFHLElBQUksR0FBRyxFQUFFLEtBQUEsRUFBSyxPQUFPLGNBQTNFLDJDQUE2RSxDQUFGOzs7Z0JBRTNFLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFDdEMsbUVBQW1FO2dCQUNuRSx3REFBd0Q7Z0JBQ3hELE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQztxQkFDL0IsR0FBRyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUFwQixDQUFvQixDQUFDO3FCQUNyQyxNQUFNLENBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxNQUFNLENBQUMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLEVBQWpELENBQWlELENBQUM7cUJBQ3JFLE9BQU8sQ0FBQyxVQUFDLE1BQU07b0JBQ2Qsa0JBQWtCLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNqQyxDQUFDLENBQUMsQ0FBQztnQkFDTCxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLGdCQUFnQixDQUFDO2dCQUN4RCxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtvQkFDbEMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztvQkFDcEQsSUFBSSxhQUFhLENBQUMsSUFBSSxFQUFFO3dCQUN0QixhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksR0FBTSxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksU0FBSSxhQUFhLENBQUMsSUFBTSxDQUFDO3FCQUNwRjtpQkFDRjtnQkFDRCxzQkFBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLGFBQ3RDLFNBQVMsRUFBRSxHQUFHLEVBQ2QsaUJBQWlCLG1CQUFBLEVBQ2pCLGtCQUFrQixvQkFBQSxJQUNmLE9BQU8sRUFDVixFQUFDOzs7S0FDSjtJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQXhDRCxJQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25hdHVyZVY0LCBTaWduYXR1cmVWNENyeXB0b0luaXQsIFNpZ25hdHVyZVY0SW5pdCB9IGZyb20gXCJAYXdzLXNkay9zaWduYXR1cmUtdjRcIjtcbmltcG9ydCB7IFJlcXVlc3RQcmVzaWduZXIsIFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCBhcyBJSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgU0hBMjU2X0hFQURFUiwgVU5TSUdORURfUEFZTE9BRCB9IGZyb20gXCIuL2NvbnN0YW50c1wiO1xuXG4vKipcbiAqIFBhcnRpYWxCeTxULCBLPiBtYWtlcyBwcm9wZXJ0aWVzIHNwZWNpZmllZCBpbiBLIG9wdGlvbmFsIGluIGludGVyZmFjZSBUXG4gKiBzZWU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQzMTU5ODg3L21ha2UtYS1zaW5nbGUtcHJvcGVydHktb3B0aW9uYWwtaW4tdHlwZXNjcmlwdFxuICogKi9cbnR5cGUgT21pdDxULCBLIGV4dGVuZHMga2V5b2YgVD4gPSBQaWNrPFQsIEV4Y2x1ZGU8a2V5b2YgVCwgSz4+O1xudHlwZSBQYXJ0aWFsQnk8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gT21pdDxULCBLPiAmIFBhcnRpYWw8UGljazxULCBLPj47XG5cbmV4cG9ydCB0eXBlIFMzUmVxdWVzdFByZXNpZ25lck9wdGlvbnMgPSBQYXJ0aWFsQnk8XG4gIFNpZ25hdHVyZVY0SW5pdCAmIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCxcbiAgXCJzZXJ2aWNlXCIgfCBcInVyaUVzY2FwZVBhdGhcIlxuPiAmIHsgc2lnbmluZ05hbWU/OiBzdHJpbmcgfTtcblxuZXhwb3J0IGNsYXNzIFMzUmVxdWVzdFByZXNpZ25lciBpbXBsZW1lbnRzIFJlcXVlc3RQcmVzaWduZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ25lcjogU2lnbmF0dXJlVjQ7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFMzUmVxdWVzdFByZXNpZ25lck9wdGlvbnMpIHtcbiAgICBjb25zdCByZXNvbHZlZE9wdGlvbnMgPSB7XG4gICAgICAvLyBBbGxvdyBgc2lnbmluZ05hbWVgIGJlY2F1c2Ugd2Ugd2FudCB0byBzdXBwb3J0IHVzZWNhc2Ugb2Ygc3VwcGx5IGNsaWVudCdzIHJlc29sdmVkIGNvbmZpZ1xuICAgICAgLy8gZGlyZWN0bHkuIFdoZXJlIHNlcnZpY2UgZXF1YWxzIHNpZ25pbmdOYW1lLlxuICAgICAgc2VydmljZTogb3B0aW9ucy5zaWduaW5nTmFtZSB8fCBvcHRpb25zLnNlcnZpY2UgfHwgXCJzM1wiLFxuICAgICAgdXJpRXNjYXBlUGF0aDogb3B0aW9ucy51cmlFc2NhcGVQYXRoIHx8IGZhbHNlLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9O1xuICAgIHRoaXMuc2lnbmVyID0gbmV3IFNpZ25hdHVyZVY0KHJlc29sdmVkT3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJlc2lnbihcbiAgICByZXF1ZXN0VG9TaWduOiBJSHR0cFJlcXVlc3QsXG4gICAgeyB1bnNpZ25hYmxlSGVhZGVycyA9IG5ldyBTZXQoKSwgdW5ob2lzdGFibGVIZWFkZXJzID0gbmV3IFNldCgpLCAuLi5vcHRpb25zIH06IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge31cbiAgKTogUHJvbWlzZTxJSHR0cFJlcXVlc3Q+IHtcbiAgICB1bnNpZ25hYmxlSGVhZGVycy5hZGQoXCJjb250ZW50LXR5cGVcIik7XG4gICAgLy8gUzMgcmVxdWlyZXMgU1NFIGhlYWRlcnMgdG8gYmUgc2lnbmVkIGluIGhlYWRlcnMgaW5zdGVhZCBvZiBxdWVyeVxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2F3cy9hd3Mtc2RrLWpzLXYzL2lzc3Vlcy8xNTc2XG4gICAgT2JqZWN0LmtleXMocmVxdWVzdFRvU2lnbi5oZWFkZXJzKVxuICAgICAgLm1hcCgoaGVhZGVyKSA9PiBoZWFkZXIudG9Mb3dlckNhc2UoKSlcbiAgICAgIC5maWx0ZXIoKGhlYWRlcikgPT4gaGVhZGVyLnN0YXJ0c1dpdGgoXCJ4LWFtei1zZXJ2ZXItc2lkZS1lbmNyeXB0aW9uXCIpKVxuICAgICAgLmZvckVhY2goKGhlYWRlcikgPT4ge1xuICAgICAgICB1bmhvaXN0YWJsZUhlYWRlcnMuYWRkKGhlYWRlcik7XG4gICAgICB9KTtcbiAgICByZXF1ZXN0VG9TaWduLmhlYWRlcnNbU0hBMjU2X0hFQURFUl0gPSBVTlNJR05FRF9QQVlMT0FEO1xuICAgIGlmICghcmVxdWVzdFRvU2lnbi5oZWFkZXJzW1wiaG9zdFwiXSkge1xuICAgICAgcmVxdWVzdFRvU2lnbi5oZWFkZXJzLmhvc3QgPSByZXF1ZXN0VG9TaWduLmhvc3RuYW1lO1xuICAgICAgaWYgKHJlcXVlc3RUb1NpZ24ucG9ydCkge1xuICAgICAgICByZXF1ZXN0VG9TaWduLmhlYWRlcnMuaG9zdCA9IGAke3JlcXVlc3RUb1NpZ24uaGVhZGVycy5ob3N0fToke3JlcXVlc3RUb1NpZ24ucG9ydH1gO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zaWduZXIucHJlc2lnbihyZXF1ZXN0VG9TaWduLCB7XG4gICAgICBleHBpcmVzSW46IDkwMCxcbiAgICAgIHVuc2lnbmFibGVIZWFkZXJzLFxuICAgICAgdW5ob2lzdGFibGVIZWFkZXJzLFxuICAgICAgLi4ub3B0aW9ucyxcbiAgICB9KTtcbiAgfVxufVxuIl19